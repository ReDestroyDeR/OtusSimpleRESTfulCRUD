# Values for Simple Restful Crud Application
# redestroyder<daniil.schroder@gmail.com>

replicaCount: 3

namespace: "otus"

image:
  repository: redestroyder/simple_restful_crud
  pullPolicy: IfNotPresent

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: { }
  name: "simple-restful-crud-service-account"

podAnnotations: { }

# Pod Security is minorly configured on docker-image level
podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

#metallb:
#  configInline:
#    address-pools:
#      - name: default
#        protocol: layer2
#        addresses:
#          - 200.0.0.0-200.0.100.0

ingress-nginx:
  controller:
    containerPort:
      prometheus: 9113

    service:
      type: LoadBalancer
      externalTrafficPolicy: Local

    metrics:
      enabled: true

      serviceMonitor:
        enabled: true
        additionalLabels: {
          simple-restful-crud: monitoring
        }

ingress:
  enabled: true
  className: "nginx"
  annotations: {
    nginx.ingress.kubernetes.io/rewrite.target: /,
  }
  hosts:
    - host: arch.homework
      paths:
        - path: /
          pathType: Prefix

resources: { }

serviceMonitor:
  labels: {
    simple-restful-crud: monitoring
  }

kube-prometheus-stack:
  commonLabels: {
    simple-restful-crud: monitoring # This is dumb, but simple
  }

  grafana:
    adminUser: admin
    adminPassword: admin

    ingress:
      enabled: true
      hosts:
        - "grafana.arch.homework"
      ingressClassName: nginx

  prometheus:
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - "prometheus.arch.homework"

    prometheusSpec:
      serviceMonitorSelector: {
        matchLabels: {
          simple-restful-crud: monitoring
        }
      }

  # Mitigation of transition to secure port | Doesn't work
#  kubeControllerManager:
#    service:
#      port: 10257
#      targetPort: 10257
#
#    serviceMonitor:
#      insecureSkipVerify: true # INSECURE!
#
#  kubeProxy:
#    service:
#      port: 10257
#      targetPort: 10257
#
#    serviceMonitor:
#      https: true # May not work
#
#  kubeScheduler:
#    service:
#      port: 10257
#      targetPort: 10257
#
#    serviceMonitor:
#      insecureSkipVerify: true # INSECURE!

postgresql:
  # Permission fix for NFS systems based on Rancher local filesystem
  #  readReplicas:
  #    extraInitContainers:
  #      - name: init-perms
  #        image: ubuntu
  #        command: [ "/bin/sh" ]
  #        args:
  #          - -c
  #          - >-
  #            chown -R 1001:1001 /bitnami/postgresql
  #        volumeMounts:
  #          - name: data
  #            mountPath: /bitnami/postgresql
  #            subPath:
  #  primary:
  #    extraInitContainers:
  #      - name: init-perms
  #        image: ubuntu
  #        command: [ "/bin/sh" ]
  #        args:
  #          - -c
  #          - >-
  #            chown -R 1001:1001 /bitnami/postgresql
  #        volumeMounts:
  #          - name: data
  #            mountPath: /bitnami/postgresql
  #            subPath:

  fullnameOverride: "otus-postgresql"
  service:
    port: 5432

  postgresqlDatabase: arch_homework

  persistence:
    size: 4Gi
    accessModes:
      - ReadWriteOnce

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels: {
        simple-restful-crud: monitoring
      }

  postgresqlUsername: postgres
  postgresqlPassword: postgres
  initdbScripts:
    init.sql: |
      CREATE USER otus WITH ENCRYPTED PASSWORD 'otus';
      GRANT ALL PRIVILEGES ON DATABASE arch_homework TO otus;

secrets:
  # Host and port are from overrides that are defined above
  datasource_postgres_host: "otus-postgresql"
  datasource_postgres_port: "5432"
  datasource_postgres_database: "arch_homework"
  datasource_postgres_username: "otus"
  datasource_postgres_password: "otus"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }
